diff --git a/app/app.zip b/app/app2.zip
similarity index 92%
rename from app/app.zip
rename to app/app2.zip
index da9bbe9..493aaff 100644
Binary files a/app/app.zip and b/app/app2.zip differ
diff --git a/app/application.py b/app/application.py
index 44e1fbe..be94432 100644
--- a/app/application.py
+++ b/app/application.py
@@ -1,137 +1,89 @@
 #coding: utf-8
 import json
 import flask
-import random
-# Spotify library
+# Spotify library.
 import spotipy
 from spotipy.oauth2 import SpotifyClientCredentials
-# Youtube stuff
+# Youtube stuff.
 import youtube
 from youtube_search import YoutubeSearch
 
-# Constant vars
-NUM_SONGS = 60
-NUM_ATTEMPTS = 3
-
 application = flask.Flask(__name__)
 
-# Opening our JSON configuration file (which has our tokens)
+# Opening our JSON configuration file (which has our tokens).
 with open("config.json", encoding='utf-8-sig') as json_file:
     APIs = json.load(json_file)
 
 def getTracksFromSeed(seed, seedType):
-    # Creating and authenticating our Spotify applicationlication
+    # Creating and authenticating our Spotify applicationlication.
     client_credentials_manager = SpotifyClientCredentials(APIs["spotify"]["client_id"], APIs["spotify"]["client_secret"])
     spotify = spotipy.Spotify(client_credentials_manager=client_credentials_manager)
 
-    trackList = set()
-    attempts = NUM_ATTEMPTS
-    while attempts != 0:
-        song_limit = NUM_SONGS - len(trackList)
-
-        # Exit loop if we received NUM_SONGS in the trackList
-        if song_limit == 0:
-            break
-
-        print("Attempt Left {}".format(attempts - 1))
-
-        # Spotify API to find search results
-        if seedType == "genre":
-            if seed in spotify.recommendation_genre_seeds()['genres']:
-                results = spotify.recommendations(seed_genres=[seed], limit=song_limit)
-        elif seedType == "artist":
-            search = spotify.search(q='artist:' + seed, type='artist')
-            items = search['artists']['items']
-            if len(items) > 0:
-                artist = items[0]
-                results = spotify.recommendations(seed_artists=[artist['external_urls']['spotify']], limit=song_limit)
-
-        for i in results["tracks"]:
-            # If there's only one artist add "trackName - artist"
-            if (i["artists"].__len__() == 1):
-                trackList.add(i["name"] + " - " + i["artists"][0]["name"])
-            # Else add "trackName - artist1, artist2, etc"
-            else:
-                nameString = ""
-                for index, b in enumerate(i["artists"]):
-                    nameString += (b["name"])
-                    if (i["artists"].__len__() - 1 != index):
-                        nameString += ", "
-                trackList.add(i["name"] + " - " + nameString)
-
-        attempts -= 1
-
+    if seedType == "genre":
+        if seed in spotify.recommendation_genre_seeds()['genres']:
+            results = spotify.recommendations(seed_genres=[seed], limit=10)
+    elif seedType == "artist":
+        search = spotify.search(q='artist:' + seed, type='artist')
+        items = search['artists']['items']
+        if len(items) > 0:
+            artist = items[0]
+            results = spotify.recommendations(seed_artists=[artist['external_urls']['spotify']], limit=3)
+    # elif seedType == "song":
+    #     results = spotify.search(q='name:' + seed, type='track')
+    #     items = results['tracks']['items']
+    #     if len(items) > 0:
+    #         track = items[0]
+    #         return spotify.recommendations(seed_tracks=[track['url']], limit=60)
+    trackList = []
+    # For each track in the playlist.
+    for i in results["tracks"]:
+        # In case there's only one artist.
+        if (i["artists"].__len__() == 1):
+            # We add trackName - artist.
+            trackList.append(i["name"] + " - " + i["artists"][0]["name"])
+        # In case there's more than one artist.
+        else:
+            nameString = ""
+            # For each artist in the track.
+            for index, b in enumerate(i["artists"]):
+                nameString += (b["name"])
+                # If it isn't the last artist.
+                if (i["artists"].__len__() - 1 != index):
+                    nameString += ", "
+            # Adding the track to the list.
+            trackList.append(i["name"] + " - " + nameString)
+    print(trackList);
     return trackList
 
 def getTracksFromPlaylist(playlistURL):
-    # Creating and authenticating our Spotify application
+    # Creating and authenticating our Spotify application.
     client_credentials_manager = SpotifyClientCredentials(APIs["spotify"]["client_id"], APIs["spotify"]["client_secret"])
     spotify = spotipy.Spotify(client_credentials_manager=client_credentials_manager)
 
-    # Spotify API to get a playlist
+    # Getting a playlist.
     results = spotify.user_playlist_tracks(user="",playlist_id=playlistURL)
 
-    trackList = set()
-
+    trackList = []
+    # For each track in the playlist.
     for i in results["items"]:
-        # Limit playlist to NUM_SONGS
-        if len(trackList) == NUM_SONGS:
-            break
-
-        # If there's only one artist add "trackName - artist"
+        # In case there's only one artist.
         if (i["track"]["artists"].__len__() == 1):
-            trackList.add(i["track"]["name"] + " - " + i["track"]["artists"][0]["name"])
-        # Else add "trackName - artist1, artist2, etc"
+            # We add trackName - artist.
+            trackList.append(i["track"]["name"] + " - " + i["track"]["artists"][0]["name"])
+        # In case there's more than one artist.
         else:
             nameString = ""
+            # For each artist in the track.
             for index, b in enumerate(i["track"]["artists"]):
                 nameString += (b["name"])
+                # If it isn't the last artist.
                 if (i["track"]["artists"].__len__() - 1 != index):
                     nameString += ", "
-            trackList.add(i["track"]["name"] + " - " + nameString)
-
-    # If playlist is smaller than NUM_SONGS use first artist of first track and search using seed
-    if len(trackList) != NUM_SONGS:
-        # Get first artist
-        track_info = next(iter(trackList))
-        end_index = track_info.find(",")
-        if end_index == -1:
-            end_index = len(track_info)
-        artist = track_info[track_info.find("-") + 2 : end_index]
-
-        attempts = NUM_ATTEMPTS
-        while attempts != 0:
-            song_limit = NUM_SONGS - len(trackList)
-
-            # Exit loop if we received NUM_SONGS in the trackList
-            if song_limit == 0:
-                break
-
-            print("Attempt Left {}".format(attempts - 1))
-
-            # Spotify API to find search results
-            search = spotify.search(q='artist:' + artist, type='artist')
-            items = search['artists']['items']
-            if len(items) > 0:
-                artist = items[0]
-                results = spotify.recommendations(seed_artists=[artist['external_urls']['spotify']], limit=song_limit)
-
-            for i in results["tracks"]:
-                # If there's only one artist add "trackName - artist"
-                if (i["artists"].__len__() == 1):
-                    trackList.add(i["name"] + " - " + i["artists"][0]["name"])
-                # Else add "trackName - artist1, artist2, etc"
-                else:
-                    nameString = ""
-                    for index, b in enumerate(i["artists"]):
-                        nameString += (b["name"])
-                        if (i["artists"].__len__() - 1 != index):
-                            nameString += ", "
-                    trackList.add(i["name"] + " - " + nameString)
-
+            # Adding the track to the list.
+            trackList.append(i["track"]["name"] + " - " + nameString)
+    print(trackList);
     return trackList
 
-# Comments use Youtube API rather than web scraping
 def searchYoutube(songName):
     songName += " Music Video"
     #api = youtube.API(client_id=APIs["youtube"]["client_id"],
@@ -140,59 +92,44 @@ def searchYoutube(songName):
     #video = api.get('search', q=songName, maxResults=1, type='video', order='relevance')
     video = YoutubeSearch(songName, max_results=1).to_dict()
     #return video["items"][0]["id"]["videoId"]
+    print(video);
     return video[0]["id"]
 
-@application.route('/get-tracks', methods=['POST', 'GET'])
-def getTracks():
-    # songs = []
-    tracks = set()
-
+@application.route('/get-link', methods=['POST', 'GET'])
+def getLink():
+    context = {}
+    songs = []
+    link = ""
     if flask.request.method == 'POST':
-        # Get user input and seach using Spotify API
         data = flask.request.get_json()
         if data['seed'] == "Artist":
-            artist = data['search']
-            tracks = getTracksFromSeed(artist, "artist")
+            if data['search'] == "Beyonce":
+                songs = ["Ob7vObnFUJc", "sQgd6MccwZc", "a9HIaGcBocc"]
+            else:
+                artist = data['search']
+                tracks = getTracksFromSeed(artist, "artist")
+                for i in tracks:
+                    songs.append(searchYoutube(i))
         elif data['seed'] == "Genre":
             genre = data['search']
             tracks = getTracksFromSeed(genre, "genre")
+            for i in tracks:
+                songs.append(searchYoutube(i))
         elif data['seed'] == "Playlist":
             playlistURL = data['search']
             tracks = getTracksFromPlaylist(playlistURL)
-        
-        # Find YouTube video id from track
-        # for track in tracks:
-        #     songs.append(searchYoutube(track))      
-    
-    # Convert set to list and randomize
-    trackList = list(tracks)
-    random.shuffle(trackList)
-    print(trackList)
-
-    return flask.make_response(flask.jsonify({"tracks": trackList}))
-
-@application.route('/get-video-id', methods=['POST', 'GET'])
-def getVideoID():
-    video_id = ""
-
-    if flask.request.method == 'POST':
-        data = flask.request.get_json()
-        video_id = searchYoutube(data['track'])
-
-    return flask.make_response(flask.jsonify({"video_id": video_id}))
-
-@application.route('/powerhour')
-def powerhour():
-    return flask.render_template('powerhour.html')
+            for i in tracks:
+                songs.append(searchYoutube(i))
+            
+    return flask.make_response(flask.jsonify({"ids": songs}, {"names":tracks}))
 
 @application.route('/', methods=['POST', 'GET'])
 def index():
-    # token = spotipy.util.prompt_for_user_token(APIs["spotify"]["username"], "playlist-modify-private",
-    #                                        client_id=APIs["spotify"]["client_id"],
-    #                                        client_secret=APIs["spotify"]["client_secret"],
-    #                                        redirect_uri='http://localhost:8080/')
-    # spotify_client = spotipy.Spotify(auth=token)
     return flask.render_template('web.html')
 
+@application.route('/powerhour')
+def powerhour():
+    return flask.render_template('powerhour.html')
 if __name__ == '__main__':
-    application.run(host='0.0.0.0', port=8080, debug=True)
\ No newline at end of file
+    application.run(host='0.0.0.0', port=8080,debug=True)
+    
\ No newline at end of file
diff --git a/app/config.json b/app/config.json
index 0225723..320524f 100644
--- a/app/config.json
+++ b/app/config.json
@@ -2,8 +2,7 @@
     "spotify":
     {
         "client_id": "559ef5d0ee1645ee90ddd79a2f1d873a",
-        "client_secret": "668cff3a57c64cc0ab74052acdbdf0a2",
-        "username": "j2b7v1vvwxiw6f7qz2i6pwd24"
+        "client_secret": "668cff3a57c64cc0ab74052acdbdf0a2"
     },
     "youtube":
     {
diff --git a/app/static/css/powerhour.css b/app/static/css/powerhour.css
new file mode 100644
index 0000000..4f23ea1
--- /dev/null
+++ b/app/static/css/powerhour.css
@@ -0,0 +1,100 @@
+
+/* Video player iframe */
+.video{
+    display: block;
+    position:fixed; 
+    border:none; padding:0; overflow:hidden; 
+    /*top:10%; left:10%; bottom:0; right:0%; width:90%; height:90%; border:none; padding:0; overflow:hidden; 
+    align-items: center;
+    /*justify-content: center;
+    
+    position: relative;
+    /*bottom: 0; */
+}
+
+.video iframe{
+  width:100%; height:100%;
+  z-index:9;
+}
+/*position:fixed; top:10%; left:10%; bottom:0; right:0%; width:90%; height:90%; border:none; padding:0; overflow:hidden; z-index:9; }*/
+
+.drink_img{
+  position:fixed; top:0%; left:10%; bottom:0; right:0%; width:90%; height:100%; border:none; padding:0; overflow:hidden;
+  display:none;
+  z-index: 10;
+}
+#song_number{
+  border:none; padding:0;
+  position:fixed;
+  bottom: 0%; left:12%;
+  color: white;
+  font-size: 84px;
+  z-index:15;
+}
+
+
+  /* song list */
+  .song_list_div{
+    padding-left: 0.5em;
+    display: flex;
+    position:absolute;
+    top: 10%;
+    left:0%;
+    
+    width: 9.5%;
+    height: 90%;
+    background-color:#4CAF50;
+    list-style-position: inside;
+  }
+  .song_list {
+    /*background-color:;*/
+    color: #f1f1f1; 
+    font-family: Verdana, Geneva, sans-serif;
+    position: absolute;
+    display: inline-grid;
+    height: 100%;
+    list-style-position: inside;
+    margin-left: -3em;
+    margin-top: auto;
+    width:100%;
+  }
+
+
+  .song_list li {
+   
+    display:inline-block;
+    line-height: 269%;
+    border: 3.75px solid black;
+    list-style-type: none;
+    list-style-position:inside;
+    padding: 10px 0.7em;
+    float: left;
+    background-color: 4CAF50;
+    font-size: 10px;
+  }
+  .song_list li div {
+       /* fade in and out */
+    /*animation: fadeOut ease 2s;*/
+    opacity: 0;
+    transition:2s;
+    /*background-color:darkslategrey;*/
+  }
+
+  .back{
+      position: absolute;
+      top:0%;
+      left: 2%;
+      width: 8%;
+      height: 10%;
+      display: inline-table;
+  }
+  .back img{
+    
+    width: 80%;
+    height: 100%;
+  }
+  #back_button{
+      display:table-cell;
+      height: 100%;
+      width:100%;
+  }
\ No newline at end of file
diff --git a/app/static/css/web.css b/app/static/css/web.css
index 06bd1ca..4ebf805 100644
--- a/app/static/css/web.css
+++ b/app/static/css/web.css
@@ -6,20 +6,6 @@
     padding: 20px;
 }
 
-/* Video player iframe */
-.video{
-    display: flex;
-    align-items: center;
-    justify-content: center;
-    
-    position: relative;
-    bottom: 0;
-}
-
-.video iframe{
-  position:fixed; top:0; left:0; bottom:0; right:0; width:100%; height:100%; border:none; margin:0; padding:0; overflow:hidden; z-index:999999;
-}
-
 .search{
     display: flex;
     justify-content: center;
@@ -120,9 +106,3 @@
     z-index:1;
   }
 
-  .progressbar {
-    color:white;
-    display: flex;
-    align-self: center;
-    justify-content: center;
-  }
\ No newline at end of file
diff --git a/app/static/images/back-arrow.png b/app/static/images/back-arrow.png
new file mode 100644
index 0000000..8909050
Binary files /dev/null and b/app/static/images/back-arrow.png differ
diff --git a/app/static/images/back.png b/app/static/images/back.png
new file mode 100644
index 0000000..5c127a2
Binary files /dev/null and b/app/static/images/back.png differ
diff --git a/app/static/images/drink.png b/app/static/images/drink.png
new file mode 100644
index 0000000..749cdc0
Binary files /dev/null and b/app/static/images/drink.png differ
diff --git a/app/static/images/drink.png:Zone.Identifier b/app/static/images/drink.png:Zone.Identifier
new file mode 100644
index 0000000..60f0f97
--- /dev/null
+++ b/app/static/images/drink.png:Zone.Identifier
@@ -0,0 +1,3 @@
+[ZoneTransfer]
+LastWriterPackageFamilyName=Microsoft.Windows.Photos_8wekyb3d8bbwe
+ZoneId=3
diff --git a/app/static/js/main.js b/app/static/js/main.js
deleted file mode 100644
index 9917f14..0000000
--- a/app/static/js/main.js
+++ /dev/null
@@ -1,159 +0,0 @@
-// GLOBAL VARS
-var seedString;
-var player;
-var start = 0;
-var end = start + 60;
-
-var id_list = new Array();
-var song_num = 0;
-var event_trigger = 1;
-var first_played = false;
-var lastSong;
-
-function onYouTubeIframeAPIReady() {
-    console.log("youtube api installed");
-}
-
-function onPlayerStateChange(event) {
-    if (event.data != YT.PlayerState.PLAYING && first_played){
-        console.log("beer image");
-    }
-    console.log("player state: ", event.data);
-    if (event.data == YT.PlayerState.PLAYING && first_played == false){
-        first_played = true;
-    }
-
-    if (event.data == YT.PlayerState.ENDED){
-        if (event_trigger == 0){
-            event_trigger = 1;
-            console.log("double fire");
-            return;
-        }
-        else {
-            console.log(id_list.length, " big boy");
-            console.log("first fire");
-            event_trigger = 0;
-        }
-        //if (player.videoId == lastSong){
-        //console.log("we outtie");
-        //console.log(lastSong);
-        //player.destroy();
-        //}
-        if (song_num >= id_list.length) {
-        //  console.log("end player");
-            //console.log(song_num);
-            song_num = 0;
-            id_list = new Array();
-            player.destroy();
-        }
-        //loads and plays next video
-        //player.loadVideoById(id);
-        console.log("player ended");
-        player.loadVideoById({videoId:id_list[song_num], endSeconds:60});
-        song_num += 1;
-        console.log(song_num);
-    }
-}
-
-function stopVideo() {
-    player.stopVideo();
-}
-
-function SelectQueryType(clicked_id){
-    document.getElementsByClassName("chooseOne")[0].innerHTML = clicked_id;
-    document.getElementsByClassName("searchQuery")[0].disabled = false;
-    seedString = clicked_id;
-}
-
-function SearchInput(){
-    document.getElementById("power_hour").disabled = false;
-}
-
-function MakePowerHour() {
-    fetch("/get-tracks", {
-        method: "POST",
-        headers: new Headers({
-            "content-type": "application/json"
-        }),
-        body: JSON.stringify({
-            "seed": seedString,
-            "search": document.getElementById('search').value,
-        })
-    })
-    .then(function(response) {
-        console.log(response);
-        response.json().then( data => {//function(data) {
-            console.log(data);
-
-            document.getElementById("loading").setAttribute("max", data.tracks.length)
-            document.getElementById("loading_label").removeAttribute("hidden");
-            document.getElementById("loading").removeAttribute("hidden");
-
-            let promises = []
-            for (track of data.tracks) {
-                var trackCount = 1;
-                promises.push(
-                    fetch("/get-video-id", {
-                        method: "POST",
-                        headers: new Headers({
-                            "content-type": "application/json"
-                        }),
-                        body: JSON.stringify({
-                            "track": track,
-                        })
-                    })
-                    .then((response) => {
-                        return response.json();
-                    })
-                    .then(function(data) {
-                        console.log(data.video_id);
-                        id_list.push(data.video_id);
-                        document.getElementById("loading").setAttribute("value", trackCount);
-                        document.getElementById("loading").innerHTML = trackCount + "%";
-                        ++trackCount;
-                        return Promise.resolve();
-                    })
-                    .catch(console.error)
-                );
-            }
-            Promise.all(promises).then(function() {
-                console.log(id_list);
-
-                document.getElementById("loading_label").setAttribute("hidden", true);
-                document.getElementById("loading").setAttribute("hidden", true);            
-        
-                if (id_list.length > 0) {
-                    lastSong = id_list[id_list.length - 1];
-                    
-                    player = new YT.Player('player', {
-                        height: '100%',
-                        width: '100%',
-                        videoId: id_list[0],
-                        // videoId: 'M7lc1UVf-VE',
-                        playerVars: {
-                            start: start,
-                            end: end,
-                            controls: 0,
-                            disablekb: 1,
-                            fs: 1
-                        },
-                        events: {
-                            //'onReady': onPlayerReady,
-                            'onStateChange': onPlayerStateChange
-                        }
-                    });
-                    song_num += 1;
-                }
-            })
-        });
-    })
-    .catch(console.error);
-    //if id_list is not empty then load the youtube player
-}
-
-function DestroyPowerHour() {
-   // document.getElementById("deactivate").disabled = true;
-    player.destroy();
-    id_list = new Array();
-    song_num = 0;
-}
\ No newline at end of file
diff --git a/app/templates/powerhour.html b/app/templates/powerhour.html
new file mode 100644
index 0000000..4ab8e70
--- /dev/null
+++ b/app/templates/powerhour.html
@@ -0,0 +1,246 @@
+<!DOCTYPE html>
+<html>
+    <header>
+        <title>Boozify</title>
+        <link rel="icon" type="image/png" src="../static/images/favicon.png">
+        <link rel="stylesheet" href="../static/css/powerhour.css">
+    </header>
+    <script src="https://www.youtube.com/iframe_api"></script>
+    <script >
+        var seedString;
+
+        var player;
+        var start = 0;
+        var end = start + 10;
+
+      function animateList(){
+        for(var i = 1; i < 11; i++){
+                    document.getElementById("song"+i).style.opacity = 1;
+        }
+      }
+
+      function updateList(){
+        for(var i = 1; i < 11; i++){
+                document.getElementById("song"+i).style.opacity = 0;
+                if ((id_list.length - (song_num - 11 + i) ) > 9){
+                    document.getElementById("song"+i).innerHTML = song_list[(i - 1) + song_num];
+                    
+                }else{
+                    document.getElementById("song"+i).innerHTML = "";
+                    
+                }
+                //change style and opacity stuff
+            }
+      }
+      function onYouTubeIframeAPIReady() {
+          //console.log("youtube api installed");
+      }
+
+      //id list stores the youtube video ids
+      //song list stores the song - artist name 
+      var id_list = new Array();
+      var song_list = new Array();
+      //id_list.push("smqNtBXN5Mc");
+      //id_list.push("1KGCAffvGIw");
+      //id_list.push("ZAxRozTgoXM");
+      var song_num = 0;
+      var event_trigger = 1;
+      var first_played = false;
+      var lastSong;
+      var drink_img_displayed = false;
+      function onPlayerStateChange(event) {
+          console.log("song_num: " + song_num + " id list len:" + id_list.length);
+
+        if (event.data == YT.PlayerState.PLAYING || event.data == YT.PlayerState.PAUSED){
+            
+            document.getElementsByClassName("drink_img")[0].style.display='none';
+            
+        }
+        if (event.data == YT.PlayerState.ENDED){
+            //PlayerState.ENDED fires twice everytime so an event trigger is needed to stop the second call to this if statement
+            if (event_trigger == 0){
+              event_trigger = 1;
+              return;
+            }
+            else {
+              event_trigger = 0;
+              console.log("switch songs");
+            }
+            if (song_num >= id_list.length) {
+
+                song_num = 0;
+                id_list = new Array();
+                song_list = new Array();
+                document.getElementById("song_number").innerHTML = '';
+                player.destroy();   
+                console.log("fuck");
+                
+            }
+            //loads and plays next video
+            //console.log("player ended");
+            player.loadVideoById({videoId:id_list[song_num], endSeconds:10});
+            song_num += 1;
+            document.getElementById("song_number").innerHTML = song_num;
+            document.getElementsByClassName("drink_img")[0].style.display='block';
+
+            setTimeout(updateList, 1000);
+            setTimeout(animateList, 2000);
+            /*
+            const displa_drink = async() => {
+                await new Promise(function(animateList, animateList){
+                    console.log("animate!")
+                    setTimeout(animateList, 3000);
+                });
+                console.log("DRINK!")
+                 //retransition song list
+               
+            }*/
+
+           
+
+            //todo check logic
+
+
+            //update song list
+            //shift all of the elements up if there are 10 or more songs left
+            //if not then shift elements up and replace the list with blank elements
+          
+            
+            
+         
+            //console.log(song_num);
+            
+        }
+
+        console.log("player state: ", event.data);
+        if (event.data == YT.PlayerState.PLAYING && first_played == false){
+            
+            first_played = true;
+        }
+      }
+      function stopVideo() {
+        player.stopVideo();
+      }
+
+
+        function SelectQueryType(clicked_id){
+            document.getElementsByClassName("chooseOne")[0].innerHTML = clicked_id;
+            document.getElementsByClassName("searchQuery")[0].disabled = false;
+            seedString = clicked_id;
+        }
+
+        function SearchInput(){
+            document.getElementById("power_hour").disabled = false;
+        }
+        
+       
+
+        function LoadPlayer(){
+            id_list = JSON.parse(sessionStorage.getItem("id_list"));
+            song_list = JSON.parse(sessionStorage.getItem("song_list"));
+            console.log(song_list);
+            console.log(id_list);
+            if (id_list.length > 0) {
+                        lastSong = id_list[id_list.length - 1];
+                        //console.log(lastSong);
+                        document.getElementsByClassName("video")[0].style.height = "100%";
+                        document.getElementsByClassName("video")[0].style.width = "90%";
+                        document.getElementsByClassName("video")[0].style.top = "0%";
+                        document.getElementsByClassName("video")[0].style.left = "10%";
+                        player = new YT.Player('player', {
+                            //height: '390',
+                            //width: '640',
+                            videoId: id_list[0],
+                            // videoId: 'M7lc1UVf-VE',
+                            playerVars: {
+                                start: start,
+                                end: end,
+                                controls: 0,
+                                disablekb: 1,
+                                fs: 0
+                            },
+                            events: {
+                                //'onReady': onPlayerReady,
+                                'onStateChange': onPlayerStateChange
+                            }
+                        });
+                        //initialize song list on the side
+                        document.getElementsByClassName("song_list_div")[0].style.display='block';
+                        for(var i = 1; i < 11; i++){
+                            document.getElementById("song"+i).innerHTML = song_list[i-1];
+                            document.getElementById("song"+i).style.opacity = 1;
+                            console.log("list item: " + document.getElementById("song"+i).innerHTML);
+                            //change style and opacity stuff
+                        }
+                        song_num += 1;
+                        document.getElementById("song_number").innerHTML = song_num;
+                        //player.cueVideoById({videoId:id_list[song_num], endSeconds:60, "medium"});
+                        
+                        //document.getElementById("player").style.display = "flex";
+                       // document.getElementById("deactivate").disabled = false;
+                        
+           } else{
+               // return to homepage if the power hour does not load
+               window.location = '..';
+           }
+        }
+        function DestroyPowerHour() {
+           // document.getElementById("deactivate").disabled = true;
+            player.destroy();
+            id_list = new Array();
+            song_num = 0;
+        }
+    </script>
+
+    <body onload="LoadPlayer()" style="background-color:darkslategrey">
+        
+        <div class="back">
+            <a href="..">
+            <img src =/static/images/back-arrow.png>
+            </a>
+        </div>
+    
+        <div class="song_list_div">
+            <ol class="song_list">
+                <li><div value="1" id="song1"></div></li>
+                <li><div id="song2"></div></li>
+                <li>
+                    <div id="song3"></div>
+                </li>
+                <li><div id="song4"></div></li>
+                <li><div id="song5"></div></li>
+                <li><div id="song6"></div></li>
+                <li><div id="song7"></div></li>
+                <li><div id="song8"></div></li>
+                <li><div id="song9"></div></li>
+                <li><div id="song10"></div></li>
+            </ol>
+            
+        </div>
+        <div class="video">
+            
+            <div id="player"></div>
+            <div id="song_number"></div>
+            <!-- add in style later on-->
+            <img class="drink_img" src="/static/images/drink.png">
+        </div>
+        
+       
+
+        <script>
+            /*
+            <img class="beer" src="/static/images/beer.jpg" disabled>
+             <div class="deactivate">
+            <button id="end_power_hour" disabled onclick="DestroyPowerHour()">Destroy Power Hour/retry power hour</button>
+        </div>
+            <div class="video">
+                <iframe 
+                    id="player"
+                    src="" frameborder="0" gesture="media"
+                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>
+                </iframe>
+            </div>
+            */
+        </script>
+    </body>
+</html>
diff --git a/app/templates/web.html b/app/templates/web.html
index bf4135b..b3c461b 100644
--- a/app/templates/web.html
+++ b/app/templates/web.html
@@ -4,10 +4,107 @@
         <title>Boozify</title>
         <link rel="icon" type="image/png" src="../static/images/favicon.png">
         <link rel="stylesheet" href="../static/css/web.css">
-        <script src="https://www.youtube.com/iframe_api"></script>
-        <script src="../static/js/main.js"></script>
     </header>
-    
+    <script src="https://www.youtube.com/iframe_api"></script>
+    <script >
+
+        function SelectQueryType(clicked_id){
+            document.getElementsByClassName("chooseOne")[0].innerHTML = clicked_id;
+            document.getElementsByClassName("searchQuery")[0].disabled = false;
+            seedString = clicked_id;
+        }
+
+        function SearchInput(){
+            document.getElementById("power_hour").disabled = false;
+        }
+        function MakePowerHour() {
+            var id_list = new Array();
+            var song_list = new Array();
+            var success = false;
+            fetch("/get-link", {
+                method: "POST",
+                headers: new Headers({
+                    "content-type": "application/json"
+                }),
+                body: JSON.stringify({
+                    "seed": seedString,
+                    "search": document.getElementById('search').value,
+                })
+            })
+            .then(function(response) {
+                console.log(response);
+                response.json().then( data => {//function(data) {
+                    console.log("list data");
+                    console.log(data);
+                    console.log("end data list")
+                    for (song_id  of data[0].ids) {
+                        console.log(song_id);
+                        //id_list.push(song_id);
+                    }               
+                    /* For debugging i am caching a list */ 
+                    for(var i = 0; i < 12; i ++){
+                        id_list.push("oa7JRuLEp-w");
+                        song_list.push("Tessellate - Tokyo Police Club");
+                        //https://www.youtube.com/watch?v=oa7JRuLEp-w
+                        id_list.push("ZAxRozTgoXM");
+                        song_list.push("Wait Up - Tokyo Police Club");
+                        id_list.push("smqNtBXN5Mc");
+                        song_list.push("Bambi - Tokyo Police Club");
+
+                        id_list.push("1KGCAffvGIw");
+                        song_list.push("Your English is Good - Tokyo Police Club");
+
+                        id_list.push("4MG6rKuCfyo");
+                        song_list.push("Argentina - Tokyo Police Club");
+
+                    }
+                   /* DEBUG */
+                   //var i = 1;
+                    //for (song_name of data[1].names){
+                        //var new_songname = song_name.replace("-", "by")
+                       // song_list.push(i + ". " + new_songname);
+                       //i++;
+                    //}
+                    
+                    console.log(song_list);
+                    if (id_list.length > 0) {
+                      
+                        //player.cueVideoById({videoId:id_list[song_num], endSeconds:60, "medium"});
+                        var success = true;
+                        //document.getElementById("player").style.display = "flex";
+                       // document.getElementById("deactivate").disabled = false;
+                       //now move to new page with power hour
+                        
+                        sessionStorage.setItem("id_list", JSON.stringify(id_list));
+                        sessionStorage.setItem("song_list", JSON.stringify(song_list));
+                        window.location = '/powerhour';
+                    }else{
+                        throw "Search results empty";
+                    }
+                    //document.getElementById("player").src = data['link'];
+                });
+            })
+            .catch(window.alert(error));
+           
+            
+        }
+        /*
+        function Move(){
+            var seedString = document.getElementsByClassName("chooseOne")[0].innerHTML;
+            //assert that value is not empty
+            var searchQuery = document.getElementById("search").value;
+            if (searchQuery == ""){
+                alert("Please Enter a valid " + seedString + " in the search bar");
+            }
+            else{
+                sessionStorage.setItem("seedString", seedString);
+                sessionStorage.setItem("searchQuery", searchQuery);
+            }
+            window.location = '/powerhour';
+        }
+        */
+    </script>
+
     <body style="background-color:darkslategrey">
         <div class="logo">
             <img class="boozify_logo" src="/static/images/logo2.png" width="400">
@@ -22,20 +119,14 @@
                 </div>
             </div>
             <div class="searchbar">
-                <form onsubmit="MakePowerHour()">
+                <form>
                     <input class="searchQuery" type="text" id="search" disabled oninput="SearchInput()">
                 </form>
             </div>
         </div>
         <div class="activate">
-            <button id="power_hour" disabled onclick="MakePowerHour()">Make me a Power Hour!</button>
-        </div>
-        <div class="progressbar">
-            <label hidden id="loading_label" for="generating">Generating Power Hour: &nbsp;</label>
-            <progress hidden id="loading" value="0" max="60"> 0% </progress>
-        </div>
-        <div class="video">
-            <div id="player"></div>
+                <button id="power_hour" disabled onclick="MakePowerHour()">Make me a Power Hour!</button>
         </div>
+    
     </body>
-</html>
\ No newline at end of file
+</html>
